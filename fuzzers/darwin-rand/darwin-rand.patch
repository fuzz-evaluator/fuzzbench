diff --git a/afl-fuzz.c b/afl-fuzz.c
index 1341818..cfa4072 100644
--- a/afl-fuzz.c
+++ b/afl-fuzz.c
@@ -137,9 +137,7 @@ EXP_ST u8  skip_deterministic,        /* Skip deterministic stages?       */
            run_over10m,               /* Run time over 10 minutes?        */
            persistent_mode,           /* Running in persistent mode?      */
            deferred_mode,             /* Deferred forkserver mode?        */
-           fast_cal,                  /* Try to calibrate faster?         */
-           darwin_use_splicing_mutation = 0, /* Enable splicing mutation  */
-           darwin_opt_per_seed = 0;   /* Enable splicing mutation  */
+           fast_cal;                  /* Try to calibrate faster?         */
 
 static s32 out_fd,                    /* Persistent fd for out_file       */
            dev_urandom_fd = -1,       /* Persistent fd for /dev/urandom   */
@@ -271,10 +269,6 @@ struct queue_entry {
   u8* trace_mini;                     /* Trace bytes, if kept             */
   u32 tc_ref;                         /* Trace bytes ref count            */
 
-  u32 src_seed;                       /* Source seed from initial corpus  */
-
-  u32 mutation_history[16];    	      /* PJ: which mutations generated the new coverage */
-
   struct queue_entry *next,           /* Next element, if any             */
                      *next_100;       /* 100 elements ahead               */
 
@@ -811,7 +805,7 @@ static void mark_as_redundant(struct queue_entry* q, u8 state) {
 
 /* Append new test case to the queue. */
 
-static void add_to_queue(u8* fname, u32 len, u8 passed_det, u32 src) {
+static void add_to_queue(u8* fname, u32 len, u8 passed_det) {
 
   struct queue_entry* q = ck_alloc(sizeof(struct queue_entry));
 
@@ -819,7 +813,6 @@ static void add_to_queue(u8* fname, u32 len, u8 passed_det, u32 src) {
   q->len          = len;
   q->depth        = cur_depth + 1;
   q->passed_det   = passed_det;
-  q->src_seed     = src;
 
   if (q->depth > max_depth) max_depth = q->depth;
 
@@ -1518,7 +1511,7 @@ static void read_testcases(void) {
     if (!access(dfn, F_OK)) passed_det = 1;
     ck_free(dfn);
 
-    add_to_queue(fn, st.st_size, passed_det, (u32) queued_paths); // !PJ! initial seeds -> q->src == position in queue
+    add_to_queue(fn, st.st_size, passed_det); // !PJ! initial seeds -> q->src == position in queue
   }
 
   free(nl); /* not tracked */
@@ -3078,13 +3071,13 @@ static u8* describe_op(u8 hnb) {
 
   if (syncing_party) {
 
-    sprintf(ret, "sync:%s,seed:%06u,src:%06u", syncing_party, queue_cur->src_seed, syncing_case);
+    sprintf(ret, "sync:%s,src:%06u", syncing_party, syncing_case);
     if (nr_splices > 0)
       sprintf(ret + strlen(ret), ",sp:%06u", nr_splices);
 
   } else {
 
-    sprintf(ret, "seed:%06u,src:%06u", queue_cur->src_seed, current_entry);
+    sprintf(ret, "src:%06u", current_entry);
 
     if (splicing_with >= 0)
       sprintf(ret + strlen(ret), "+%06u", splicing_with);
@@ -3196,7 +3189,7 @@ static u8 save_if_interesting(char** argv, void* mem, u32 len, u8 fault) {
 
 #endif /* ^!SIMPLE_FILES */
 
-    add_to_queue(fn, len, 0, queue_cur->src_seed); /* PJ! */
+    add_to_queue(fn, len, 0); /* PJ! */
 
     if (hnb == 2) {
       queue_top->has_new_cov = 1;
@@ -6189,7 +6182,7 @@ havoc_stage:
 
     stage_cur_val = use_stacking;
       
-    u32 mutation_chosen = DARWIN_SelectOperator(darwin_opt_per_seed ? queue_cur->src_seed : 0);
+    u32 mutation_chosen = RAND_DARWIN_SelectOperator();
  
     for (i = 0; i < use_stacking; i++) {
 
@@ -6587,9 +6580,8 @@ havoc_stage:
         perf_score *= 2;
       }
 
-      DARWIN_NotifyFeedback(darwin_opt_per_seed ? queue_cur->src_seed : 0, queued_paths - havoc_queued);
       havoc_queued = queued_paths;
-    } else DARWIN_NotifyFeedback(darwin_opt_per_seed ? queue_cur->src_seed : 0, 0);
+    }
 
   }
 
@@ -8042,11 +8034,11 @@ int main(int argc, char** argv) {
     		break;
 
       case 's':
-        darwin_use_splicing_mutation = 1;
+//        darwin_use_splicing_mutation = 1;
         break;
       
       case 'p':
-        darwin_opt_per_seed = 1;
+//        darwin_opt_per_seed = 1;
         break;
 
       default:
@@ -8119,11 +8111,11 @@ int main(int argc, char** argv) {
 
   pivot_inputs();
 
-  if (darwin_use_splicing_mutation)
-    OKF("Using splice mutation.");
-
-  if (darwin_opt_per_seed)
-    OKF("Optimizing per seed.");
+//  if (darwin_use_splicing_mutation)
+//    OKF("Using splice mutation.");
+//
+//  if (darwin_opt_per_seed)
+//    OKF("Optimizing per seed.");
 
   if (extras_dir) load_extras(extras_dir);
 
@@ -8144,9 +8136,9 @@ int main(int argc, char** argv) {
 
   perform_dry_run(use_argv);
 
-  number_mutations = 15 + (darwin_use_splicing_mutation ? 1 : 0) + ((extras_cnt + a_extras_cnt) ? 2 : 0);
+  number_mutations = 15 + ((extras_cnt + a_extras_cnt) ? 2 : 0);
 
-  DARWIN_init(queued_at_start, number_mutations);
+    RAND_DARWIN_init(number_mutations);
 
   cull_queue();
 
@@ -8251,14 +8243,7 @@ int main(int argc, char** argv) {
   save_auto();
 
 stop_fuzzing:
-  printf("ending\n");  
-  u32 darwin_val = DARWIN_get_parent_repr(0);
-  char buffer[32], *pos=buffer;
-  char *fnmut = (char *) alloc_printf("%s/darwin_last_val", out_dir);
-  FILE* f = fopen(fnmut, "w");
-  pos += sprintf(pos, "%u", darwin_val);
-  fputs(buffer, f);
-  fclose(f);
+  printf("ending\n");
 
   SAYF(CURSOR_SHOW cLRD "\n\n+++ Testing aborted %s +++\n" cRST,
        stop_soon == 2 ? "programmatically" : "by user");
diff --git a/afl_darwin.c b/afl_darwin.c
index 15a5c46..57251f9 100644
--- a/afl_darwin.c
+++ b/afl_darwin.c
@@ -3,229 +3,80 @@
 #include <stdio.h>
 
 unsigned kAflNumMutationOperators;
+uint8_t *choices;
+uint32_t weight_sum;
+uint32_t mutations_since_reweight;
 
-#ifdef REAL_VALUED
-	#define VALUE_TYPE double
-#else
-	#define VALUE_TYPE bool
-#endif
-
-#ifndef _nParents
-#define _nParents 5u
-#endif
+#define MUTATION_LOGGING 0
 
-#ifndef _lambda
-#define _lambda 4u
+#if MUTATION_LOGGING == 1
+FILE *mutation_log;
 #endif
 
-unsigned int *_nextToEvaluate;  // next child to evaluate
-unsigned int *_currentParent;   // current parent being mutated
-unsigned int *_bestSoFar;       // best so far parent
-unsigned int *_bestSoFarChild;  // best so far child (for a single parent)
-int **_parentsFitness;
-int **_childrenFitness;
-
-VALUE_TYPE ***_parents;
-VALUE_TYPE ***_children;
-VALUE_TYPE **_currentRelativeProb;
+#define MUTATIONS_BEFORE_REWEIGHT (1 << 20)
+#define MUTATION_SELECT_PRECISION 128
 
 /*
  * Initialize data structures for DARWIN
- * @nr_seeds: number of different initial seeds
  * @nr_mutations: number of mutation operators
 */
-void DARWIN_init(uint64_t nr_seeds, unsigned nr_mutations) {
-	// init RNG
-	rand_init();
-
-	kAflNumMutationOperators = nr_mutations;
-
-	// initialize opt alg data structures
-	_nextToEvaluate = (unsigned int *) malloc(nr_seeds * sizeof(unsigned int));
-	_currentParent = (unsigned int *) malloc(nr_seeds * sizeof(unsigned int));
-	_bestSoFar = (unsigned int *) malloc(nr_seeds * sizeof(unsigned int));         // best so far parent
-	_bestSoFarChild = (unsigned int *) malloc(nr_seeds * sizeof(unsigned int));    // best so far child (for a single parent)
-	_parentsFitness = (int **) malloc(nr_seeds * sizeof(int *));
-	_childrenFitness = (int **) malloc(nr_seeds * sizeof(int *));
-
-	_parents = (VALUE_TYPE ***) malloc(nr_seeds * sizeof(VALUE_TYPE **));
-	_children = (VALUE_TYPE ***) malloc(nr_seeds * sizeof(VALUE_TYPE **));
-	
-	_currentRelativeProb = (VALUE_TYPE **) malloc(nr_seeds * sizeof(VALUE_TYPE *));
-
-	printf("nParents: %u, lambda %u\n", _nParents, _lambda);
-
-	for (int seed = 0; seed < nr_seeds; seed++) {
-		_nextToEvaluate[seed] = 0;
-		_bestSoFar[seed] = 0;
-		_bestSoFarChild[seed] = 0;
-		_currentParent[seed] = 0;
-
-		_parentsFitness[seed] = malloc(_nParents * sizeof(int));
-		_childrenFitness[seed] = malloc(_lambda * sizeof(int));
-
-		_children[seed] = (VALUE_TYPE **) malloc(_lambda * sizeof(VALUE_TYPE *));
-		for (int i = 0; i < _lambda; i++)
-			_children[seed][i] = malloc(kAflNumMutationOperators * sizeof(VALUE_TYPE));
-
-		_parents[seed] = (VALUE_TYPE **) malloc(_nParents * sizeof(VALUE_TYPE *));
-		for (int i = 0; i < _nParents; i++)
-			_parents[seed][i] = malloc(kAflNumMutationOperators * sizeof(VALUE_TYPE));
-
-		memset(_parentsFitness[seed], 0, _nParents);
-		memset(_childrenFitness[seed], 0, _lambda);
-
-		// initial random values for the parents and first child individual
-		for(uint i = 0; i < _nParents; i++) {
-			for(uint j = 0; j < kAflNumMutationOperators; j++) {
-				// TODO: optionally replace with an alternate randomizer
-				_parents[seed][i][j] = rand() > (RAND_MAX / 2);
-			}
-		}
-
-		for(uint i = 0; i < kAflNumMutationOperators; i++) {
-			_children[seed][_nextToEvaluate[seed]][i] = rand() > (RAND_MAX / 2);
-		}
-
-		_currentRelativeProb[seed] = _children[seed][_nextToEvaluate[seed]];
-	}
+void RAND_DARWIN_init(unsigned nr_mutations) {
+    // init RNG
+    rand_init();
+
+    kAflNumMutationOperators = nr_mutations;
+
+    // initialise mutations with equal weight
+    mutations_since_reweight = 0;
+    choices = calloc(kAflNumMutationOperators, MUTATION_SELECT_PRECISION);
+    for (size_t i = 0; i < kAflNumMutationOperators; i++) {
+        choices[i] = i;
+    }
+    weight_sum = kAflNumMutationOperators;
+
+#if MUTATION_LOGGING == 1
+    mutation_log = fopen("mutations.log", "w");
+    fprintf(mutation_log, "Initialised mutations with equal weight, let's fuzz!\n");
+#endif
 }
 
 /*
  * Choose an AFL mutation operator
  * @seed: seed to select per-seed vector
 */
-int DARWIN_SelectOperator(uint64_t seed)
+int RAND_DARWIN_SelectOperator()
 {
-#ifdef REAL_VALUED
-	double *v = _currentRelativeProb[seed];
-	uint v_size = kAflNumMutationOperators;
-	double cumulative[kAflNumMutationOperators];
-	for (uint i = 0; i < kAflNumMutationOperators; i++)	
-		cumulative[i] = 0.0;
-
-	double minVal = 0.0;
-	double maxVal = 1.0;
-	for (uint i = 0; i < kAflNumMutationOperators; i++) {
-		if (v[kAflNumMutationOperators] < minVal) {
-			minVal = v[kAflNumMutationOperators];
-		} else {
-			if (v[kAflNumMutationOperators] > maxVal) {
-				maxVal = v[kAflNumMutationOperators];
-			}
-		}
-	}
-
-	cumulative[0] = 1 + (kAflNumMutationOperators - 1) * (v[0] - minVal) / (maxVal - minVal); // selection pressure is kAflNumMutationOperators
-	for(uint i = 1; i < kAflNumMutationOperators; i++) {
-		cumulative[i] = 1 + (kAflNumMutationOperators - 1) * (v[i] - minVal)/(maxVal - minVal);
-		cumulative[i] += cumulative[i - 1];
-	}
-
-	double rngNormVal = rand_32_double();
-
-	double randVal = rngNormVal * cumulative[kAflNumMutationOperators - 1];
-
-	int chosen = 0;
-	// didn't bother with binary search since negligible compared to other modules
-	while(cumulative[chosen] < randVal)
-		chosen++;
-	return chosen;
+    if (mutations_since_reweight >= MUTATIONS_BEFORE_REWEIGHT) {
+#if MUTATION_LOGGING == 1
+        fprintf(mutation_log, "Reweights: ");
 #else
-	// baseline:
-	bool *v = (bool *) _currentRelativeProb[seed];
-
-	// select a random mutation operator with flag == true
-	// revert to random if all false
-	uint operatorId = rand_32_int(kAflNumMutationOperators);
-	uint nTries = 0;
-	while (v[operatorId] == false && nTries < kAflNumMutationOperators) {
-		nTries++;
-		operatorId = (operatorId + 1) % kAflNumMutationOperators;
-	}
-    	return operatorId;
+        printf("Reweights: ");
 #endif
-}
-
-
-/*
- * Report feedback to DARWIN
- * @seed: seed to attribute this to
- * @numPaths: number of new paths
-*/
-void DARWIN_NotifyFeedback(uint64_t seed, unsigned numPaths)
-{
-	// update this candidate solution fitness
-	_childrenFitness[seed][_nextToEvaluate[seed]] = numPaths;
-
-	// update if new best child found
-	if(_childrenFitness[seed][_nextToEvaluate[seed]] > _childrenFitness[seed][_bestSoFarChild[seed]]) {
-		_bestSoFarChild[seed] = _nextToEvaluate[seed];
-	}
-	// move to next child candidate
-	_nextToEvaluate[seed]++;
-	
-	// if all children evaluated
-	if(_nextToEvaluate[seed] == _lambda) {
-		// set best child as future parent (only if better than the parent)
-		if(_childrenFitness[seed][_bestSoFarChild[seed]] > _parentsFitness[seed][_currentParent[seed]]) {
-			for(uint i = 0; i < kAflNumMutationOperators; i++) {
-				_parents[seed][_currentParent[seed]][i] = _children[seed][_bestSoFarChild[seed]][i];
-			}
-
-			_parentsFitness[seed][_currentParent[seed]] = _childrenFitness[seed][_bestSoFarChild[seed]];
-		}
-		// update best parent solution if needed
-		if(_parentsFitness[seed][_currentParent[seed]] > _parentsFitness[seed][_bestSoFar[seed]]) {
-			_bestSoFar[seed] = _currentParent[seed];
-		}
-
-		// move to next parent (or return to first)
-		_currentParent[seed] = (_currentParent[seed] + 1) % _nParents;
-
-		// reset indices
-		_bestSoFarChild[seed] = 0;
-		_nextToEvaluate[seed] = 0;
-
-		// reset children scores
-		memset(_childrenFitness[seed], 0, _lambda); 
-	}
-	
-	// if there are children to evaluate, generate new candidate and return
-	if(_nextToEvaluate[seed] < _lambda) {
-		_currentRelativeProb[seed] = &(_children[seed][_nextToEvaluate[seed]][0]);
-
-		for(uint i = 1; i < kAflNumMutationOperators; i++) {
-			_currentRelativeProb[seed][i] = _parents[seed][_currentParent[seed]][i];
-		}
-		
-		// select a single random gene and invert
-		int randomGene = rand_32_int(kAflNumMutationOperators);
-#ifdef REAL_VALUED
-		double mutation = (rand_32_double_gauss() - 0.5) / 4;
-		_currentRelativeProb[seed][randomGene] += mutation;
-		if(_currentRelativeProb[seed][randomGene] < 0)
-			_currentRelativeProb[seed][randomGene] = 0;
-#else		
-		_currentRelativeProb[seed][randomGene] = !_currentRelativeProb[seed][randomGene];
+        mutations_since_reweight = 0;
+        weight_sum = 0;
+        for (size_t i = 0; i < kAflNumMutationOperators; i++) {
+            uint16_t weight = 1 + rand_32_int(MUTATION_SELECT_PRECISION);
+            for (size_t j = 0; j < weight; j++, weight_sum++) {
+                choices[weight_sum] = i;
+            }
+#if MUTATION_LOGGING == 1
+            fprintf(mutation_log, "(%ld, %d), ", i, weight);
+#else
+            printf("(%ld, %d), ", i, weight);
 #endif
-	}
-}
-
-/*
- * Get the best parent solution so far as a vector (hardcoded to max mutation operators in AFL)
- * @seed: seed to attribute this to
-*/
-uint32_t DARWIN_get_parent_repr(uint64_t seed) {
-	uint32_t value;
-	bool *_currentParentBool = (bool *) (_parents[seed][_bestSoFar[seed]]); 
-	for (int i = 0; i < 15; i++) {
-		printf("%d: %s\n", i,_currentParentBool[i] ? "true" : "false");
-	}
-	/* encode parent in a number */
-	for (int i = 14; i >= 0; i--) {
-		value |= (_parents[seed][_bestSoFar[seed]][i]) ? (1 << i) : 0;
-	}
-	printf("val: %d\n", value);
-	return value;
+        }
+#if MUTATION_LOGGING == 1
+        fprintf(mutation_log, "sum: %d\n", weight_sum);
+#else
+        printf("sum: %d\n", weight_sum);
+#endif
+    } else {
+        mutations_since_reweight += 1;
+    }
+    uint32_t selection = rand_32_int(weight_sum);
+    int choice = choices[selection];
+#if MUTATION_LOGGING == 1
+    fprintf(mutation_log, "%d\n", choice);
+#endif
+    return choice;
 }
diff --git a/afl_darwin.h b/afl_darwin.h
index b76c55d..5f0dabf 100644
--- a/afl_darwin.h
+++ b/afl_darwin.h
@@ -5,14 +5,8 @@
 #ifndef DARWIN_H
 #define DARWIN_H
 
-typedef unsigned int uint;
+void RAND_DARWIN_init(unsigned);
 
-void DARWIN_init(uint64_t, unsigned);
-
-int DARWIN_SelectOperator(uint64_t);
-
-void DARWIN_NotifyFeedback(uint64_t, unsigned);
-
-uint32_t DARWIN_get_parent_repr(uint64_t);
+int RAND_DARWIN_SelectOperator();
 
 #endif
